# All of the options seen here MUST be set. 
# Otherwise, hopefully, you will get a syntax error-
# else unexpected behaviour may result.
# all whitespace & comments are ignored.

# baud rate for RTU comms, limited to whatever libmodbus supports
modbus_rtu_baud=9600,

# modbus station ID (slave address) for abb ach550 
modbus_station_id=10,

#path to serial port device node
modbus_port=/dev/tty0,

# start of modbus holding reg. range to read from
modbus_read_base=5,

# no. of registers to read
modbus_read_count=6,

# frequency, in hertz, at which the registers are read,
# AND at which the kay-value pairs are written to logfile.
update_frequency_hz=0.5;

# for each register to be read, you must define 3 things:
# an ID (string ([a-z], [A-Z], _): only for use within this .conf file)
# a TAG (string ([a-z], [A-Z], _): This will be the tag for the key-value pair log file)
# a SCALE value (float: Used to scale the raw values read from the modbus registers).
# If you don't know the scale value, just set it to 1.
#
# The syntax of such a definition is as follows:
#	ID { tag=TAG, scale=SCALE }
# 
# The number of these definitions must match the number of registers being read.
# So, if you have set modbus_read_count to a value of 6, then you must have 6
# ID definitions below.

freq { tag=ABB_OUTPUT_FREQ_HZ, scale=0.1 }

current { tag=ABB_CURRENT_A, scale=0.1 }

voltage { tag=ABB_VOLTAGE_V, scale=1 }

motorspeed { tag=ABB_MOTORSPEED_RPM, scale=1 }

kw { tag=ABB_KW, scale=0.1 }

kwh { tag=ABB_KWH, scale=0.1 }

# finally, you can use your register IDs to describe
# how the key-value pairs are arranged in the datastring(s)
# written to the log file. The example below shows
# two key value pairs, the first containing 4 values, and the
# containing the final 4 values. Each set of curly brackets {}
# corresponds to a seperate key-value pair in the same log file.

{freq,current,voltage,motorspeed}
{kw,kwh}

